<project name="gwt-voices" default="dist">

	<target name="init" description="Initialization of ant properties">
		<!-- Global Properties -->
		<property environment="env" />

		<!-- gwt.location property -->
		<condition property="gwt.location.default" value="${env.GWTTRUNK_HOME}" else="">
			<isset property="env.GWTTRUNK_HOME" />
		</condition>
		<input addproperty="gwt.location" defaultvalue="${gwt.location.default}" message="GWT installation, i.e. directory where gwt-user.jar / gwt-servlet.jar / gwt-dev.jar can be found" />

		<!-- gwt.tools property -->
		<condition property="gwt.tools.default" value="${env.GWT_TOOLS}" else="">
			<isset property="env.GWT_TOOLS" />
		</condition>
		<input addproperty="gwt.tools" defaultvalue="${gwt.tools.default}" message="GWT tools directory, i.e. directory where http://google-web-toolkit.googlecode.com/svn/tools/ is checked out" />

		<!-- gwt tools stuff -->
		<property name="gwt.tools.lib" location="${gwt.tools}/lib" />
		<property name="gwt.tools.antlib" location="${gwt.tools}/antlib" />

		<!-- javac defaults -->
		<property name="javac.debug" value="true" />
		<property name="javac.debuglevel" value="lines,vars,source" />
		<property name="javac.encoding" value="utf-8" />
		<property name="javac.nowarn" value="true" />
		<property name="javac.source" value="1.5" />
		<property name="javac.target" value="1.5" />
		<property name="javac.memoryMaximumSize" value="1g" />

		<!-- gwt jars -->
		<property name="gwt-user.jar" location="${gwt.location}/gwt-user.jar" />
		<property name="gwt-dev.jar" location="${gwt.location}/gwt-dev.jar" />

		<!-- Pulls in tasks defined in ant-contrib, i.e. foreach -->
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${gwt.tools.antlib}/ant-contrib-1.0b3.jar" />
			</classpath>
		</taskdef>

		<!-- gwt-voices.libdir property -->
		<input addproperty="gwt-voices.libdir" defaultvalue="/fred/lib/gwt-voices" message="gwt-voices library, i.e. directory where you keep your gwt-voices jar file(s)" />

		<for param="file">
			<fileset dir="${gwt-voices.libdir}">
				<include name="gwt-voices-*.*.*.jar" />
				<exclude name="gwt-voices-*.*.*-*.jar" />
			</fileset>
			<sequential>
				<echo message="@{file}" />
			</sequential>
		</for>

	</target>

	<target name="lib-locations" description="Determine library locations" depends="init">
		<!-- gwt-voices.version property -->
		<input addproperty="gwt-voices.version" defaultvalue="0.0.0" message="gwt-voices release version" />

		<!-- gwt-voices.jar property -->
		<property name="gwt-voices.jar" value="gwt-voices-${gwt-voices.version}.jar" />

		<!-- gwt-voices.javadoc-jar property -->
		<property name="gwt-voices.javadoc-jar" value="gwt-voices-${gwt-voices.version}-javadoc.jar" />

		<!-- Prevent overwriting existing libraries -->
		<available file="${gwt-voices.libdir}/${gwt-voices.jar}" property="gwt-voices.jar-exists" />
		<condition property="gwt-voices.fail-overwrite">
			<and>
				<not>
					<equals arg1="${gwt-voices.version}" arg2="0.0.0" />
				</not>
				<isset property="gwt-voices.jar-exists" />
			</and>
		</condition>
		<fail if="gwt-voices.fail-overwrite" message="Cannot overwrite existing jar file ${gwt-voices.libdir}/${gwt-voices.jar}" />

	</target>


	<!-- Replace @GWT_VOICES_VERION@ with actual version of build -->
	<target name="filter" description="Filters distro files for versioning" depends="lib-locations">
		<mkdir dir="build/out" />
		<mkdir dir="build/demo" />

		<copy todir="build/src">
			<fileset dir="src">
				<exclude name="**/package.html" />
				<exclude name="**/*.as" />
			</fileset>
			<fileset dir=".">
				<include name="LICENSE" />
				<include name="NOTICE" />
			</fileset>
			<filterset>
				<filter token="GWT_VOICES_VERSION" value="${gwt-voices.version}" />
			</filterset>
		</copy>

		<copy todir="build/demo">
			<fileset dir="demo">
				<exclude name="**/package.html" />
			</fileset>
			<fileset dir=".">
				<include name="LICENSE" />
				<include name="NOTICE" />
			</fileset>
			<filterset>
				<filter token="GWT_VOICES_VERSION" value="${gwt-voices.version}" />
			</filterset>
		</copy>

	</target>

	<target name="build" depends="lib-locations, clean, javac, gwtc">
	</target>

	<target name="javac" description="Java compile" depends="filter">

		<echo message="Compiling build/src ..." />

		<javac compiler="javac1.5" listfiles="true" destdir="build/out" debug="${javac.debug}" debuglevel="${javac.debuglevel}" source="${javac.source}" target="${javac.target}" nowarn="${javac.nowarn}" encoding="${javac.encoding}">
			<src path="build/src" />
			<classpath location="${gwt-user.jar}" />
			<classpath location="${gwt-dev.jar}" />
		</javac>

		<echo message="Copying src files build/out ..." />

		<copy todir="build/out">
			<fileset dir="build/src">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- build demo files as a sanity check -->

		<echo message="Copying src files (for reference purposes) and NOTICE/LICENSE files to build/demo ..." />

		<copy todir="build/demo">
			<fileset dir="build/src">
				<include name="**/*" />
			</fileset>
		</copy>

		<echo message="Compiling build/demo ..." />

		<javac compiler="javac1.5" listfiles="false" destdir="build/demo" debug="${javac.debug}" debuglevel="${javac.debuglevel}" source="${javac.source}" target="${javac.target}" nowarn="${javac.nowarn}" encoding="${javac.encoding}">
			<src path="build/demo" />
			<classpath location="${gwt-user.jar}" />
			<classpath location="${gwt-dev.jar}" />
		</javac>

	</target>

	<target name="gwtc" description="Compile to JavaScript" depends="javac">
		<outofdate>
			<sourcefiles>
				<fileset dir="build/out" />
				<fileset dir="build/demo" />
				<fileset file="${gwt-user.jar}" />
				<fileset file="${gwt-dev.jar}" />
			</sourcefiles>

			<targetfiles path="build/war/demo/demo.nocache.js" />

			<sequential>
				<mkdir dir="build/war" />

				<java maxmemory="1g" dir="build" classname="com.google.gwt.dev.Compiler" classpath="build/out:build/demo:${gwt-user.jar}:${gwt-dev.jar}" fork="yes" failonerror="true">
					<arg value="-war" />
					<arg path="build/war" />
					<arg value="com.allen_sauer.gwt.voices.demo.VoicesDemo" />
					<arg value="-style" />
					<arg value="OBF" />
				</java>

				<copy todir="build/war">
					<fileset file="war/VoicesDemo.html" />
					<fileset file="war/VoicesDemo.css" />
				</copy>

				<copydir dest="build/war/images" src="war/images" />
			</sequential>
		</outofdate>
	</target>

	<target name="javadoc" description="Generate Javadoc" depends="javac">
		<javadoc access="protected" classpath="${gwt-user.jar}" destdir="build/javadoc" doctitle="gwt-voices - Sound support for your Google-Web-Toolkit Projects" encoding="UTF-8" failonerror="true" source="1.5" sourcepath="build/demo" />
	</target>

	<target name="stat">
		<exec executable="svn">
			<arg value="stat" />
		</exec>
	</target>

	<target name="tag">
		<exec executable="svn">
			<arg value="ls" />
			<arg value="http://gwt-voices.googlecode.com/svn/tags/" />
		</exec>
		<exec executable="svn">
			<arg value="info" />
			<arg value="http://gwt-voices.googlecode.com/svn/" />
		</exec>
		<echo message="" />
		<echo message="********************************************************************************************************************************************" />
		<echo message="svn -m 'for prosterity' cp . https://gwt-voices.googlecode.com/svn/tags/gwt-voices-${gwt-voices.version}-r" />
		<echo message="********************************************************************************************************************************************" />
		<echo message="" />
	</target>

	<target name="dist" description="Create distribution jar" depends="build,javadoc">
		<mkdir dir="build/dist" />

		<jar destfile="build/dist/${gwt-voices.jar}">
			<fileset dir="build/out" />
		</jar>

		<jar basedir="build/javadoc" destfile="build/dist/${gwt-voices.javadoc-jar}" />

		<copy todir="${gwt-voices.libdir}">
			<fileset dir="build/dist" />
		</copy>

		<antcall target="tag" />

		<antcall target="stat" />
	</target>

	<target name="clean">
		<delete dir="build" />
		<delete dir="war/WEB-INF/classes" />
		<delete dir="war/demo" />
		<delete dir="war/test" />

		<!-- Put the directories back so Eclipse doesn't loose the 'derived' attribute -->
		<mkdir dir="build" />
		<mkdir dir="war/WEB-INF/classes" />
		<mkdir dir="war/demo" />
		<mkdir dir="war/test" />
	</target>

	<target name="sshls" description="SSH ls (test)">

		<sshexec command="ls" username="sauer" host="allen-sauer.com" knownhosts="/fred/.ssh/known_hosts" keyfile="/fred/.ssh/id_dsa" passphrase="" />

	</target>

	<target name="deploy" description="Build and deploy to demo site" depends="clean, javac, gwtc">

		<sshexec command="mkdir com.allen_sauer.gwt.voices.demo.VoicesDemo" username="sauer" host="allen-sauer.com" knownhosts="/fred/.ssh/known_hosts" keyfile="/fred/.ssh/id_dsa" passphrase="" />

		<scp todir="sauer@allen-sauer.com:com.allen_sauer.gwt.voices.demo.VoicesDemo/" knownhosts="/fred/.ssh/known_hosts" keyfile="/fred/.ssh/id_dsa" passphrase="" verbose="true">
			<fileset dir="build/war" />
		</scp>

		<sshexec command="./deploy.sh com.allen_sauer.gwt.voices.demo.VoicesDemo" username="sauer" host="allen-sauer.com" knownhosts="/fred/.ssh/known_hosts" keyfile="/fred/.ssh/id_dsa" passphrase="" />

	</target>

</project>
